install.packages("./lmSupport.tar",type='source',repos=NULL)
install.packages("./lmSupport.tar.gz",type='source',repos=NULL)
install.packages('lattice')
install.packages('nlme')
setwd("C:\Users\Eileen\Documents\R")
setwd("C:/Users/Eileen/Documents/R")
opposites <- read.csv('opposites.csv')
head(opposites, 20)
dim(opposites)
table(opposites$id)
(nT <- max(table(opposites$id)))  # nT x nT variance-covariance matrix
range(opposites$opp)
(opp.m <- with(opposites, tapply(opp, list(time), mean)))
plot(0:3, 0:3, type = 'n', xlab = '', ylab = '', xaxt = 'n', ylim = c(70,320))
axis(1, at = 0:3, labels = 1:4)
for (i in unique(opposites$id)){
with(opposites[opposites$id == i, ],
lines(time, opp, col = c('gray')))
}
lines(0:3, opp.m, type = 'o', col = 'red', lwd = 2, pch = 16)
with(opposites, tapply(opp, list(time), mean))
with(opposites, tapply(opp, list(time), sd))
opp.l2 <- aggregate(opposites[, c('opp', 'ccog')], list(opposites$id), mean)
head(opp.l2)
dim(opp.l2)
names(opp.l2) <- c('id','opp.mean','ccog')
head(opp.l2)
mean(opp.l2$opp.mean)
unstruct <- gls(opp ~ time*ccog, data = opposites, correlation = corSymm(form = ~ 1 | id),  weights = varIdent(form = ~ 1|wave), method="REML")
install.packages(lme4)
install.packages(plyr)
install.packages(nlme)
library(lme4)
library(plyr)
library(lattice)
library(nlme)
unstruct <- gls(opp ~ time*ccog, data = opposites, correlation = corSymm(form = ~ 1 | id),  weights = varIdent(form = ~ 1|wave), method="REML")
summary(unstruct)
unstruct.varests <- c(1.0000000, 0.9248170, 0.9584917, 0.9468611)
(unstruct.cor <- corMatrix(unstruct$modelStruct$corStruct)[[1]])
(unstruct.cov <- unstruct.cor*unstruct$sigma^2*unstruct.varests%*%t(unstruct.varests))
unstruct <- gls(opp ~ time*ccog, data = opposites, correlation =
corSymm(form = ~ 1 | id),  weights = varIdent(form = ~ 1|wave),
method="REML")
logLik(unstruct)
loglik <- as.numeric(logLik(unstruct))
(DIV <- -2*loglik)
(AIC <- -2*loglik + 2*10)  # REML is used.  Only counting the random effect
(BIC <- -2*loglik + log(35)*10)  # SAS PROC MIXED uses M (# level2 units) as SS in BIC
indep <- gls(opp ~ time*ccog, opposites, method="REML")
summary(indep)$sigma^2  # 1204.883
summary(indep)$sigma^2*diag(nT)
comp.symm <- update(indep, correlation=corCompSymm(,form = ~ 1 |id))
summary(comp.symm)     # Rho = .731
(cs.cor <- corMatrix(comp.symm$modelStruct$corStruct)[[1]])
(cs.cov <- cs.cor * comp.symm$sigma^2)
RIM <- lme(opp ~ time * ccog, opposites, random =  ~ 1 | id, method="REML")
summary(RIM)
VarCorr(RIM)  # 1231.4 = 900.1 (tau) + 331.3 (sigma)
(tau00 <- as.numeric(VarCorr(RIM)[1]))
(TAU.nT <- tau00*rep(1,nT)%*%t(rep(1,nT)))
(SIGMA.nT <- summary(RIM)$sigma^2*diag(nT))
(RIM.cov <- TAU.nT + SIGMA.nT)
anova(indep, comp.symm, RIM, unstruct)
RSM <- update(RIM, random =  ~ time | id)
summary(RSM)
anova(RIM,RSM)
RIM.AR1 <- update(RIM, correlation=corAR1(,form = ~ 1 |id))
summary(RIM.AR1)
RIM.hetero <- update(RIM, weights=varIdent(form = ~1|wave))
summary(RIM.hetero)
RIM.off.diag <- update(RIM, correlation = corSymm(form = ~ 1 | id))
summary(RIM.off.diag)
anova(RIM, RIM.AR1, RIM.hetero, RIM.off.diag, RSM, unstruct)
RIM.toep <- update(RIM, correlation=corARMA(,form = ~ 1 |id,p=3,q=0))
summary(RIM.toep)
RIM.hetero.AR1 <- update(RIM, correlation=corAR1(,form = ~ 1 |id), weights=varIdent(form = ~1|wave))
summary(RIM.hetero.AR1)
anova(indep, RIM, RIM.AR1, RSM, RIM.toep, RIM.hetero, RIM.hetero.AR1, unstruct)
setwd("../Comprehension/")
source("LookingWhileListeningBeta.r")
library(ggplot2)
library(dplyr)
library(lattice)
load(file="./looking_data.Rdata")
d <- longTable
rm(longTable)
str(d)
which(names(d)=="CDIWG_WP")
d <- d[,1:27]
d$ASD <- as.factor(ifelse(as.numeric(d$Subject) >= 500, "ASD", "TD"))
badLookCodes <- c("-", ".", "0.5")
badLooks <- d$Looks %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- as.numeric(d$GazeByImageAOI)
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
head(d$GazeByImageAOI,n=30)
badLooks
badLooks <- d$Look %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- as.numeric(d$GazeByImageAOI)
levels(d$Condition) <- c("BothDiff","PerceptualSim","SemanticSim")
d_baseline <- d %.% filter(-2000 <= Time, Time <= 0)
d <- d %.% filter(Time>=-2000 & Time <=3000)
proportion_na <- function(xs) sum(is.na(xs)) / length(xs)
prop_na <- d %.% filter(200 <= Time, Time <= 1800) %.%
group_by(Subject, TrialNo) %.%
summarise(PropNA = proportion_na(GazeByImageAOI))
prop_na
to_exclude <- prop_na %.% filter(PropNA > .5)
d <- anti_join(d, to_exclude)
d %.% group_by(Subject, Order) %.%
summarise(NTrials = n_distinct(TrialNo)) %.%
summarise(TrialsBySubject = sum(NTrials)) %.%
summarize(Total = sum(TrialsBySubject))
trial_count_by_condition <- d %.%
group_by(Subject, Condition, Order) %.%
summarise(TrialCount = n_distinct(TrialNo)) %.%
arrange(TrialCount) %.% filter(TrialCount < 4) #this line eliminates block-conditions that have strictly less than 4 trials
d <- anti_join(d, trial_count_by_condition)
count_trials <- d %.% group_by(Subject, Condition) %.% summarise(NumTrials=n_distinct(TrialNo))
count_trials
with(count_trials,hist(NumTrials[Condition=="BothDiff"]))
with(count_trials,hist(NumTrials[Condition=="PerceptualSim"]))
with(count_trials,hist(NumTrials[Condition=="SemanticSim"]))
d$Target2 <- d$Target
participants <- c(301, 413, 417, 418, 422, 501, 502, 504, 506, 507, 510, 511, 513, 517, 518, 521, 523, 524)
d_matched <- d %.% mutate(match=match(Subject, participants, nomatch=NA)) %.% filter(is.na(match))
TD_CDI_min <- 75
library(lmSupport)
by_subject <- AggregateLooks(d_matched, ASD + Subject + Time + Condition ~ GazeByImageAOI)
str(d_matched$GazeByImageAOI)
edit(AggregateLooks)
by_subject <- d_matched %.%
group_by(ASD,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
head(by_subject,n=20)
m_aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = m_aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "Matched Groups")
m_proportion_over_trials <- d_matched %.%
group_by(Subject,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
View(d)
rm(d)
d_matched <- merge(d_matched,m_proportion_over_trials,by="Subject")
rm(d_matched)
load(file="./looking_data.Rdata")
d <- longTable
rm(longTable)
str(d)
d <- d[,1:27]
d$ASD <- as.factor(ifelse(as.numeric(d$Subject) >= 500, "ASD", "TD"))
# Label coded looks with stimuli names.
badLookCodes <- c("-", ".", "0.5")
badLooks <- d$Look %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- as.numeric(d$GazeByImageAOI)
# Rename Condition Levels
levels(d$Condition) <- c("BothDiff","PerceptualSim","SemanticSim")
# Before dropping any trials based on percentage missing data, make a copy of the dataset for the baseline window
d_baseline <- d %.% filter(-2000 <= Time, Time <= 0)
d <- d %.% filter(Time>=-2000 & Time <=3000)
proportion_na <- function(xs) sum(is.na(xs)) / length(xs)
prop_na <- d %.% filter(200 <= Time, Time <= 1800) %.%
group_by(Subject, TrialNo) %.%
summarise(PropNA = proportion_na(GazeByImageAOI))
# Exclude trials with more than 50% missing data
to_exclude <- prop_na %.% filter(PropNA > .5)
# Remove these trials from the whole dataset
d <- anti_join(d, to_exclude)
# Count trials
d %.% group_by(Subject, Order) %.%
summarise(NTrials = n_distinct(TrialNo)) %.%
summarise(TrialsBySubject = sum(NTrials)) %.%
summarize(Total = sum(TrialsBySubject))
trial_count_by_condition <- d %.%
group_by(Subject, Condition, Order) %.%
summarise(TrialCount = n_distinct(TrialNo)) %.%
arrange(TrialCount) %.% filter(TrialCount < 4) #this line eliminates block-conditions that have strictly less than 4 trials
d <- anti_join(d, trial_count_by_condition)
count_trials <- d %.% group_by(Subject, Condition) %.% summarise(NumTrials=n_distinct(TrialNo))
count_trials
with(count_trials,hist(NumTrials[Condition=="BothDiff"]))
with(count_trials,hist(NumTrials[Condition=="PerceptualSim"]))
with(count_trials,hist(NumTrials[Condition=="SemanticSim"]))
d$Target2 <- d$Target
participants <- c(301, 413, 417, 418, 422, 501, 502, 504, 506, 507, 510, 511, 513, 517, 518, 521, 523, 524)
d_matched <- d %.% mutate(match=match(Subject, participants, nomatch=NA)) %.% filter(is.na(match))
save(d_matched,file="./looking_data_with_MatchedPinfo_clean.Rdata")
by_subject <- d_matched %.%
group_by(ASD,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
m_aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = m_aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "Matched Groups")
m_proportion_over_trials <- d_matched %.%
group_by(Subject,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
head(m_proportion_over_trials)
m_proportion_over_trials <- merge(m_proportion_over_trials,unique(d_matched[,c("Subject","CDIWG_WU")]),by="Subject")
head(m_proportion_over_trials)
testWindow <- by_subject %.% filter(Time>=200 & Time<=1800)
dim(by_subject) - dim(testWindow)
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE)) %.% ungroup()
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE))
testWindow
testWindowSummary <- testWindow %.% group_by(ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE))%.% ungroup()
testWindowSummary
baselineWindow <- by_subject %.% filter(Time>=-1400 & Time<200)
dim(by_subject) - dim(baselineWindow)
baselineWindowSummary <- baselineWindow %.% group_by(ASD,Condition) %.% summarise(ProportionBaseline=mean(Proportion,na.rm=TRUE))
baselineWindowSummary
testWindow <- m_proportion_over_trials %.% filter(Time>=200 & Time<=1800)
dim(by_subject) - dim(testWindow)
#testWindowSummary collapses across time-bins to create a proportion of
dim(m_proportion_over_trials) - dim(testWindow)
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE))%.% ungroup()
testWindow
m_proportion_over_trials <- d_matched %.%
group_by(Subject,ASD,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
m_proportion_over_trials <- merge(m_proportion_over_trials,unique(d_matched[,c("Subject","CDIWG_WU")]),by="Subject")
head(m_proportion_over_trials)
testWindow <- m_proportion_over_trials %.% filter(Time>=200 & Time<=1800)
dim(m_proportion_over_trials) - dim(testWindow)
#testWindowSummary collapses across time-bins to create a proportion of
# time looking by participant x condition (3 rows per participant )
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE))%.% ungroup()
# testWindowSummaryWide creates a wide dataset that has only one row per
#   participant, and a column for each condition
testWindowSummaryWide <- reshape(testWindowSummary, idvar="Subject",
direction="wide", v.names="ProportionTestWindow", timevar="Condition")
testWindowSummaryWide
baselineWindow <- m_proportion_over_trials %.% filter(Time>=-1400 & Time<200)
dim(by_subject) - dim(baselineWindow)
dim(m_proportion_over_trials) - dim(baselineWindow)
baselineWindowSummary <- baselineWindow %.% group_by(Subject,ASD,Condition) %.% summarise(ProportionBaseline=mean(Proportion,na.rm=TRUE))
baselineWindowSummaryWide <- reshape(baselineWindowSummary, idvar="Subject", direction="wide", v.names="ProportionBaseline", timevar="Condition")
DiffScore <- testWindowSummary$ProportionTestWindow - baselineWindowSummary$ProportionBaseline
dm.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
dm.ancova <- merge(dm.ancova,unique(d[,c("Subject","CDIWG_WU")]),by="Subject")
dm.ancova$C_CDIWG_WU <- dm.ancova$CDIWG_WU - mean(dm.ancova$CDIWG_WU)
dm.ancova$DiffScore <- DiffScore
library(lmSupport)
contrasts(dm.ancova$ASD) <- varContrasts(dm.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(dm.ancova$Condition) <- varContrasts(dm.ancova$Condition,Type="POC",
POCList=list(c(1,-1,0),c(-1,-1,2)))
matched.ancova<-lm(DiffScore~ASD*Condition,data=dm.ancova)
summary(matched.ancova)
Anova(matched.ancova,type=3)
levels(d.ancova$Condition)
levels(dm.ancova$Condition)
dm.ancova
m_proportion_over_trials
names(m_proportion_over_trials)
save(m_proportion_over_trials,file="./matched_level1.Rdata")
RIM <- lme(Proportion ~ Time+ASD+Condition, random = ~ 1 | Subject, m_proportion_over_trials, method = 'ML')
library(nlme)
RIM <- lme(Proportion ~ Time+ASD+Condition, random = ~ 1 | Subject, m_proportion_over_trials, method = 'ML')
library(lmer)
library(lme4)
RIM <- lmer(Proportion~Time+ASD+Condition+(1|Subject),data=m_proportion_over_trials)
summary(RIM)
RIM <- lmer(Proportion~Time+ASD*Condition+(1|Subject),data=m_proportion_over_trials)
summary(RIM)
RIM <- lmer(Proportion~Time+ASD*Condition+C_CDIWG_WU+(1|Subject),data=m_proportion_over_trials)
names(m_proportion_over_trials)
m_proportion_over_trials$C_CDIWG_WU <- m_proportion_over_trials$C_CDIWG_WU - mean(m_proportion_over_trials$C_CDIWG_WU)
m_proportion_over_trials$C_CDIWG_WU <- m_proportion_over_trials$CDIWG_WU - mean(m_proportion_over_trials$CDIWG_WU)
RIM <- lmer(Proportion~Time+ASD*Condition+C_CDIWG_WU+(1|Subject),data=m_proportion_over_trials)
summary(RIM)
RIM <- lmer(Proportion~Time+I(Time^2)+ASD*Condition+C_CDIWG_WU+(1|Subject),data=m_proportion_over_trials)
summary(RIM)
