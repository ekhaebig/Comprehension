baselineWindowSummaryWide <- reshape(baselineWindowSummary, idvar="Subject", direction="wide", v.names="ProportionBaseline", timevar="Condition")
database_dir <- "."
database_filename <- list.files(database_dir, pattern = "Pilot_Database_[0-9]{6}")
database_filename <- paste0(database_dir, "/", database_filename)
participantinfo <- read.xlsx(database_filename, 1)
participantinfo <- merge(participantinfo, testWindowSummaryWide,
by.y="Subject", by.x="ID")
participantinfo <- merge(participantinfo, baselineWindowSummaryWide,
by.y="Subject", by.x="ID")
write.csv(particpantinfo, "participantInfoWithMeanProportion.csv", row.names = FALSE)
str(particpantinfo)
str(baselineWindowSummary)
participantinfo <- read.xlsx(database_filename, 1)
str(particpantinfo)
head(participantinfo)
str(d)
library(xlsx)
participantinfo <- read.xlsx(database_filename, 1)
getClass(participantinfo)
class(participantinfo)
str(participantinfo)
#the dataset that you can use to run basic analyses is "participantinfo".  You can use this within R or export to Excel, SPSS, etc.
d <- merge(d, testWindowSummaryWide,by.y="Subject", by.x="ID")
names(d)
names(d) %in$ "ID"
names(d) %in% "ID"
help('merge')
names(testWindowSummaryWide)
d <- merge(d, testWindowSummaryWide,by.y="Subject")
d <- merge(d, testWindowSummaryWide,by="Subject")
d <- merge(d, baselineWindowSummaryWide,by="Subject")
testWindowSummaryWide
baselineWindowSummaryWide
names(d)
d$ASD.x <- NULL
d$ASD.y <- NULL
names(d)
save(d,'looking_data_with_pinfo_clean.Rdata')
save(d,file='looking_data_with_pinfo_clean.Rdata')
d %.% group_by(ASD, Subject) %.% summarise(Count = n_distinct(TrialNo))
d %.% group_by(ASD, Subject, Condition) %.% summarise(Count = n_distinct(TrialNo))
d %.% group_by(ASD, Condition) %.% summarise(Count = n_distinct(Subject))
summary(d[,c("ASD")])
levels(d$ASD)
summary(d$ASD)
summary(as.data.frame(d$ASD)
)
names(d)
DiffScore <- testWindowSummary$ProportionTestWindow - baselineWindowSummary$ProportionBaseline
43*3
d.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
d.ancova$DiffScore <- DiffScore
contrasts(d.ancova$ASD)
contrasts(d.ancova$Condition)
library(lmSupport)
contrasts(d.ancova$ASD) <- varContrasts(d.ancova$ASD,Type="POC",POCList=list(c(-1,1)))
levels(d.ancova$Condition)
contrasts(d.ancova$Condition) <- varContrasts(d.ancova$ASD,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
varContrasts(d.ancova$ASD,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
contrasts(d.ancova$Condition) <- varContrasts(d.ancova$Condition,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
lm(DiffScore~ASD*Condition,data=d)
lm(DiffScore~ASD*Condition,data=d.ancova)
m.ancova<-lm(DiffScore~ASD*Condition,data=d.ancova)
summary(m.ancova)
contrasts(d.ancova$Condition)
dNew <- expand.grid(ASD=levels(d.ancova$ASD),Condition=levels(d.ancova$Condition))
dNew
predict(m.ancova,dNew)
modelPredictions(m.ancova,dNew)
contrasts(d.ancova$ASD) <- varContrasts(d.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(d.ancova$Condition) <- varContrasts(d.ancova$Condition,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
m.ancova<-lm(DiffScore~ASD*Condition,data=d.ancova)
summary(m.ancova)
contrasts(d.ancova$ASD) <- varContrasts(d.ancova$ASD,Type="DUMMY",RefLevel=1)
m.ancova<-lm(DiffScore~ASD*Condition,data=d.ancova)
summary(m.ancova)
names(d)
d.ancova <- merge(d.ancova,d[,c("Subject","CDIWG_WU")],by="Subject")
head(d[,c("Subject","CDIWG_WU")])
d.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
d.ancova
temp <- d[,c("Subject","CDIWG_WU")]
d.ancova <- merge(d.ancova,unique(d[,c("Subject","CDIWG_WU")]),by="Subject")
View(d.ancova)
d.ancova$DiffScore <- DiffScore
contrasts(d.ancova$ASD) <- varContrasts(d.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(d.ancova$Condition) <- varContrasts(d.ancova$Condition,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
m.ancova<-lm(DiffScore~ASD*Condition+CDIWG_WU,data=d.ancova)
summary(m.ancova)
d.ancova$C_CDIWG_WU <- d.ancova$CDIWG_WU - mean(d.ancova$CDIWG_WU)
m.ancova<-lm(DiffScore~ASD*Condition+C_CDIWG_WU,data=d.ancova)
summary(m.ancova)
participants <- c(301, 413, 417, 418, 422, 501, 502, 504, 506, 507, 510, 511, 513, 517, 518, 521, 523, 524)
d_matched <- d %.% mutate(match=match(Subject, participants, nomatch=NA)) %.% filter(is.na(match))
d_matched <- d_matched %.% filter(ASD=="ASD")
by_subject <- AggregateLooks(d_matched, Subject + Time + Condition ~ GazeByImageAOI)
aggregated_proportion <- by_subject %.% group_by(Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = aggregated_proportion, x = Time, y = Proportion, color = Condition) +
geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "Matched Groups")
by_subject <- AggregateLooks(d_matched, ASD + Subject + Time + Condition ~ GazeByImageAOI)
aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "aggregated looks")
# Aggregated Plots
# aggregated = each child contributes one average proportion of looks across trials
#   in each condition to the average of Group proportion of looking in the plots
by_subject <- AggregateLooks(d, ASD + Subject + Time + Condition ~ GazeByImageAOI)
aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "aggregated looks")
by_subject <- AggregateLooks(d_matched, ASD + Subject + Time + Condition ~ GazeByImageAOI)
m_aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = m_aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "aggregated looks")
setwd("F:/Comprehension")
source("LookingWhileListeningBeta.r")
#options(stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(lattice)
# Load the data
load(file="./looking_data.Rdata")
d <- longTable
rm(longTable)
str(d)
#######################################################
#########              RECODING & CLEANING
#######################################################
# Code participant
d$ASD <- as.factor(ifelse(as.numeric(d$Subject) >= 500, "ASD", "TD"))
# Label coded looks with stimuli names.
badLookCodes <- c("-", ".", "0.5")
badLooks <- d$Looks %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- factor(d$GazeByImageAOI,levels=c(0,1),labels=c("Distractor","Target"))
# Rename Condition Levels
levels(d$Condition) <- c("BothDiff","SemanticSim","PerceptualSim")
# Before dropping any trials based on percentage missing data, make a copy of the dataset for the baseline window
d_baseline <- d %.% filter(-2000 <= Time, Time <= 0)
#Filter data to contain only measurements in the [-2000,3000] time window
d <- d %.% filter(Time>=-2000 & Time <=3000)
# Compute the proportion of missing data by subject x trial number during the
# test window
proportion_na <- function(xs) sum(is.na(xs)) / length(xs)
prop_na <- d %.% filter(200 <= Time, Time <= 1800) %.%
group_by(Subject, TrialNo) %.%
summarise(PropNA = proportion_na(GazeByImageAOI))
# Exclude trials with more than 50% missing data
to_exclude <- prop_na %.% filter(PropNA > .5)
# Remove these trials from the whole dataset
d <- anti_join(d, to_exclude)
# Count trials
d %.% group_by(Subject, Order) %.%
summarise(NTrials = n_distinct(TrialNo)) %.%
summarise(TrialsBySubject = sum(NTrials)) %.%
summarize(Total = sum(TrialsBySubject))
#Exclude conditions within a subject with fewer than 4 trials per block
trial_count_by_condition <- d %.%
group_by(Subject, Condition, Order) %.%
summarise(TrialCount = n_distinct(TrialNo)) %.%
arrange(TrialCount) %.% filter(TrialCount < 4) #this line eliminates block-conditions that have strictly less than 4 trials
d <- anti_join(d, trial_count_by_condition)
# Print the number of trials by subject in each condition, and create histograms of number of trials by condition
count_trials <- d %.% group_by(Subject, Condition) %.% summarise(NumTrials=n_distinct(TrialNo))
count_trials
with(count_trials,hist(NumTrials[Condition=="BothDiff"]))
with(count_trials,hist(NumTrials[Condition=="PerceptualSim"]))
with(count_trials,hist(NumTrials[Condition=="SemanticSim"]))
# AggregateLooks makes a column called "Target", so create a column called
# "Target2" to avoid interfering with the inner workings of AggregateLooks
d$Target2 <- d$Target
setwd("F:/Comprehension")
source("LookingWhileListeningBeta.r")
#options(stringsAsFactors = FALSE)
library(ggplot2)
library(dplyr)
library(lattice)
# Load the data
load(file="./looking_data.Rdata")
d <- longTable
rm(longTable)
str(d)
#######################################################
#########              RECODING & CLEANING
#######################################################
# Code participant
d$ASD <- as.factor(ifelse(as.numeric(d$Subject) >= 500, "ASD", "TD"))
# Label coded looks with stimuli names.
badLookCodes <- c("-", ".", "0.5")
badLooks <- d$Looks %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- factor(d$GazeByImageAOI,levels=c(0,1),labels=c("Distractor","Target"))
# Rename Condition Levels
levels(d$Condition) <- c("BothDiff","SemanticSim","PerceptualSim")
# Before dropping any trials based on percentage missing data, make a copy of the dataset for the baseline window
d_baseline <- d %.% filter(-2000 <= Time, Time <= 0)
#Filter data to contain only measurements in the [-2000,3000] time window
d <- d %.% filter(Time>=-2000 & Time <=3000)
# Compute the proportion of missing data by subject x trial number during the
# test window
proportion_na <- function(xs) sum(is.na(xs)) / length(xs)
prop_na <- d %.% filter(200 <= Time, Time <= 1800) %.%
group_by(Subject, TrialNo) %.%
summarise(PropNA = proportion_na(GazeByImageAOI))
# Exclude trials with more than 50% missing data
to_exclude <- prop_na %.% filter(PropNA > .5)
# Remove these trials from the whole dataset
d <- anti_join(d, to_exclude)
# Count trials
d %.% group_by(Subject, Order) %.%
summarise(NTrials = n_distinct(TrialNo)) %.%
summarise(TrialsBySubject = sum(NTrials)) %.%
summarize(Total = sum(TrialsBySubject))
#Exclude conditions within a subject with fewer than 4 trials per block
trial_count_by_condition <- d %.%
group_by(Subject, Condition, Order) %.%
summarise(TrialCount = n_distinct(TrialNo)) %.%
arrange(TrialCount) %.% filter(TrialCount < 4) #this line eliminates block-conditions that have strictly less than 4 trials
d <- anti_join(d, trial_count_by_condition)
# Print the number of trials by subject in each condition, and create histograms of number of trials by condition
count_trials <- d %.% group_by(Subject, Condition) %.% summarise(NumTrials=n_distinct(TrialNo))
count_trials
with(count_trials,hist(NumTrials[Condition=="BothDiff"]))
with(count_trials,hist(NumTrials[Condition=="PerceptualSim"]))
with(count_trials,hist(NumTrials[Condition=="SemanticSim"]))
# AggregateLooks makes a column called "Target", so create a column called
# "Target2" to avoid interfering with the inner workings of AggregateLooks
d$Target2 <- d$Target
participants <- c(301, 413, 417, 418, 422, 501, 502, 504, 506, 507, 510, 511, 513, 517, 518, 521, 523, 524)
d_matched <- d %.% mutate(match=match(Subject, participants, nomatch=NA)) %.% filter(is.na(match))
by_subject <- AggregateLooks(d_matched, ASD + Subject + Time + Condition ~ GazeByImageAOI)
m_aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = m_aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "Matched Groups")
testWindow <- by_subject %.% filter(Time>=200 & Time<=1800)
dim(by_subject) - dim(testWindow)
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE)) %.% ungroup()
testWindowSummaryWide <- reshape(testWindowSummary, idvar="Subject",
direction="wide", v.names="ProportionTestWindow", timevar="Condition")
baselineWindow <- by_subject %.% filter(Time>=-1400 & Time<200)
dim(by_subject) - dim(baselineWindow)
baselineWindowSummary <- baselineWindow %.% group_by(Subject,ASD,Condition) %.% summarise(ProportionBaseline=mean(Proportion,na.rm=TRUE))
baselineWindowSummaryWide <- reshape(baselineWindowSummary, idvar="Subject", direction="wide", v.names="ProportionBaseline", timevar="Condition")
d_matched <- merge(d_matched, testWindowSummaryWide,by="Subject")
d_matched <- merge(d_matched, baselineWindowSummaryWide,by="Subject")
save(d_matched,file='Matched_looking_data_with_pinfo_clean.Rdata')
write.csv(particpantinfo, "MatchedParticipantInfoWithMeanProportion.csv", row.names = FALSE)
save(d_matched,file='looking_data_with_MatchedPinfo_clean.Rdata')
write.csv(particpantinfo, "participantInfoWithMeanProportion.csv", row.names = FALSE)
d_matched %.% group_by(ASD, Subject) %.% summarise(Count = n_distinct(TrialNo))
#count of trials per condition for each subject
d_matched %.% group_by(ASD, Subject, Condition) %.% summarise(Count = n_distinct(TrialNo))
# number of participants included by group and condition
d_matched %.% group_by(ASD, Condition) %.% summarise(Count = n_distinct(Subject))
DiffScore <- testWindowSummary$ProportionTestWindow - baselineWindowSummary$ProportionBaseline
dm.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
dm.ancova <- merge(dm.ancova,unique(d[,c("Subject","CDIWG_WU")]),by="Subject")
dm.ancova$C_CDIWG_WU <- dm.ancova$CDIWG_WU - mean(dm.ancova$CDIWG_WU)
dm.ancova$DiffScore <- DiffScore
library(lmSupport)
contrasts(dm.ancova$ASD) <- varContrasts(dm.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(dm.ancova$Condition) <- varContrasts(dm.ancova$Condition,Type="POC",POCList=list(c(1,0,-1),c(-1,2,-1)))
matched.ancova<-lm(DiffScore~ASD*Condition,data=dm.ancova)
summary(matched.ancova)
df
# Open a connection to the file, and specify that it is read-only
f <- file("./Semantic_merged_5.5.14.txt",open="r")
# Read from the file:
# 1. We want the first copy of the column names, but we will omit
# lines matching this later.
first_line <- readLines(f,n=1)
# Note: We have now read the first line of the file. That line is
# now ``behind us''. If we were to read all lines at this point,
# we will run through to the end of the file from our current
# position (which is at the beginning on the second line).
lines <- readLines(f) # This may throw a warning---nothing to worry about.
# We are done reading the file, so close the connection.
close(f)
# We now have a vector, with as many elements as there are lines
# in the text file (minus 1, since we already read the first line
# above to get the column names). We can see which lines we want
# to discard by checking the first character: if the line begins
# with a \t, it means the first field is definitely empty, and
# indicates that the line is blank. If the line begins with S,
# then it is a line containing heading information, and should
# also be removed.
linesToRemove <- substr(lines,1,1) %in% c('\t','S')
lines <- lines[!linesToRemove]
# And now let's stick the header line on the front:
lines <- c(first_line,lines)
# To take this vector of unuseful text and create a useful data
# structure, we can can tell R to read this text variable as if it
# were a file, and then we can pass it through read.table() like
# we would normally.
f <- textConnection(lines, open='r')
# This file delimits columns with tabs. Thus, we will split lines
# into columns wherever there is a \t in the string (the special
# character for ``tab'').
df <- read.table(f, sep = "\t", header = TRUE)
levels(df$Condition)
setwd("F:/Comprehension")
source("LookingWhileListeningBeta.r")
library(ggplot2)
library(dplyr)
library(lattice)
load(file="./looking_data.Rdata")
d <- longTable
rm(longTable)
str(d)
#######################################################
#########              RECODING & CLEANING
#######################################################
# Code participant
d$ASD <- as.factor(ifelse(as.numeric(d$Subject) >= 500, "ASD", "TD"))
# Label coded looks with stimuli names.
badLookCodes <- c("-", ".", "0.5")
badLooks <- d$Looks %in% badLookCodes
d$GazeByImageAOI <- as.character(d$Look)
d$GazeByImageAOI[badLooks] <- NA
d$GazeByImageAOI <- factor(d$GazeByImageAOI,levels=c(0,1),labels=c("Distractor","Target"))
# Rename Condition Levels
levels(d$Condition) <- c("BothDiff","PerceptualSim","SemanticSim")
# Before dropping any trials based on percentage missing data, make a copy of the dataset for the baseline window
d_baseline <- d %.% filter(-2000 <= Time, Time <= 0)
#Filter data to contain only measurements in the [-2000,3000] time window
d <- d %.% filter(Time>=-2000 & Time <=3000)
# Compute the proportion of missing data by subject x trial number during the
# test window
proportion_na <- function(xs) sum(is.na(xs)) / length(xs)
prop_na <- d %.% filter(200 <= Time, Time <= 1800) %.%
group_by(Subject, TrialNo) %.%
summarise(PropNA = proportion_na(GazeByImageAOI))
# Exclude trials with more than 50% missing data
to_exclude <- prop_na %.% filter(PropNA > .5)
# Remove these trials from the whole dataset
d <- anti_join(d, to_exclude)
# Count trials
d %.% group_by(Subject, Order) %.%
summarise(NTrials = n_distinct(TrialNo)) %.%
summarise(TrialsBySubject = sum(NTrials)) %.%
summarize(Total = sum(TrialsBySubject))
#Exclude conditions within a subject with fewer than 4 trials per block
trial_count_by_condition <- d %.%
group_by(Subject, Condition, Order) %.%
summarise(TrialCount = n_distinct(TrialNo)) %.%
arrange(TrialCount) %.% filter(TrialCount < 4) #this line eliminates block-conditions that have strictly less than 4 trials
d <- anti_join(d, trial_count_by_condition)
# Print the number of trials by subject in each condition, and create histograms of number of trials by condition
count_trials <- d %.% group_by(Subject, Condition) %.% summarise(NumTrials=n_distinct(TrialNo))
count_trials
with(count_trials,hist(NumTrials[Condition=="BothDiff"]))
with(count_trials,hist(NumTrials[Condition=="PerceptualSim"]))
with(count_trials,hist(NumTrials[Condition=="SemanticSim"]))
# AggregateLooks makes a column called "Target", so create a column called
# "Target2" to avoid interfering with the inner workings of AggregateLooks
d$Target2 <- d$Target
participants <- c(301, 413, 417, 418, 422, 501, 502, 504, 506, 507, 510, 511, 513, 517, 518, 521, 523, 524)
d_matched <- d %.% mutate(match=match(Subject, participants, nomatch=NA)) %.% filter(is.na(match))
by_subject <- AggregateLooks(d_matched, ASD + Subject + Time + Condition ~ GazeByImageAOI)
m_aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = m_aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "Matched Groups")
testWindow <- by_subject %.% filter(Time>=200 & Time<=1800)
dim(by_subject) - dim(testWindow)
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE)) %.% ungroup()
testWindowSummaryWide <- reshape(testWindowSummary, idvar="Subject",
direction="wide", v.names="ProportionTestWindow", timevar="Condition")
baselineWindow <- by_subject %.% filter(Time>=-1400 & Time<200)
dim(by_subject) - dim(baselineWindow)
baselineWindowSummary <- baselineWindow %.% group_by(Subject,ASD,Condition) %.% summarise(ProportionBaseline=mean(Proportion,na.rm=TRUE))
baselineWindowSummaryWide <- reshape(baselineWindowSummary, idvar="Subject", direction="wide", v.names="ProportionBaseline", timevar="Condition")
d_matched <- merge(d_matched, testWindowSummaryWide,by="Subject")
d_matched <- merge(d_matched, baselineWindowSummaryWide,by="Subject")
save(d_matched,file='looking_data_with_MatchedPinfo_clean.Rdata')
DiffScore <- testWindowSummary$ProportionTestWindow - baselineWindowSummary$ProportionBaseline
dm.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
dm.ancova <- merge(dm.ancova,unique(d[,c("Subject","CDIWG_WU")]),by="Subject")
dm.ancova$C_CDIWG_WU <- dm.ancova$CDIWG_WU - mean(dm.ancova$CDIWG_WU)
dm.ancova$DiffScore <- DiffScore
library(lmSupport)
contrasts(dm.ancova$ASD) <- varContrasts(dm.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(dm.ancova$Condition) <- varContrasts(dm.ancova$Condition,Type="POC",
POCList=list(c(1,-1,0),c(-1,-1,2)))
matched.ancova<-lm(DiffScore~ASD*Condition,data=dm.ancova)
summary(matched.ancova)
by_subject <- AggregateLooks(d, ASD + Subject + Time + Condition ~ GazeByImageAOI)
aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") + labs(title = "aggregated looks")
by_subject <- AggregateLooks(d, ASD + Subject + Time + Condition ~ GazeByImageAOI)
aggregated_proportion <- by_subject %.% group_by(ASD, Condition, Time) %.% summarise(Proportion = mean(Proportion))
qplot(data = aggregated_proportion, x = Time, y = Proportion, color = Condition) +
facet_grid(ASD ~ .) + geom_line()+ geom_line(y=.5, colour="gray48") +
labs(title = "Full Dataset - Looking Behavior")
testWindow <- by_subject %.% filter(Time>=200 & Time<=1800)
dim(by_subject) - dim(testWindow)
testWindowSummary <- testWindow %.% group_by(Subject,ASD,Condition) %.%
summarise(ProportionTestWindow=mean(Proportion,na.rm=TRUE)) %.% ungroup()
testWindowSummaryWide <- reshape(testWindowSummary, idvar="Subject",
direction="wide", v.names="ProportionTestWindow", timevar="Condition")
baselineWindow <- by_subject %.% filter(Time>=-1400 & Time<200)
dim(by_subject) - dim(baselineWindow)
baselineWindowSummary <- baselineWindow %.% group_by(Subject,ASD,Condition) %.% summarise(ProportionBaseline=mean(Proportion,na.rm=TRUE))
baselineWindowSummaryWide <- reshape(baselineWindowSummary, idvar="Subject", direction="wide", v.names="ProportionBaseline", timevar="Condition")
d <- merge(d, testWindowSummaryWide,by="Subject")
d <- merge(d, baselineWindowSummaryWide,by="Subject")
save(d,file='looking_data_with_pinfo_clean.Rdata')
write.csv(particpantinfo, "participantInfoWithMeanProportion.csv", row.names = FALSE)
d %.% group_by(ASD, Subject) %.% summarise(Count = n_distinct(TrialNo))
d %.% group_by(ASD, Subject, Condition) %.% summarise(Count = n_distinct(TrialNo))
d %.% group_by(ASD, Condition) %.% summarise(Count = n_distinct(Subject))
DiffScore <- testWindowSummary$ProportionTestWindow - baselineWindowSummary$ProportionBaseline
d.ancova <- testWindowSummary[,c("Subject","ASD","Condition")]
d.ancova <- merge(d.ancova,unique(d[,c("Subject","CDIWG_WU")]),by="Subject")
d.ancova$C_CDIWG_WU <- d.ancova$CDIWG_WU - mean(d.ancova$CDIWG_WU)
d.ancova$DiffScore <- DiffScore
library(lmSupport)
contrasts(d.ancova$ASD) <- varContrasts(d.ancova$ASD,Type="DUMMY",RefLevel=2)
contrasts(d.ancova$Condition) <- varContrasts(d.ancova$Condition,Type="POC",POCList=list(c(1,-1,0),c(-1,-1,2)))
ancova<-lm(DiffScore~ASD*Condition+C_CDIWG_WU,data=d.ancova)
ancova_cdi <-lm(DiffScore~ASD*Condition+C_CDIWG_WU,data=d.ancova)
ancova <-lm(DiffScore~ASD*Condition,data=d.ancova)
summary(ancova)
summary(ancova_cdi)
levels(d.ancova$Condition)
names(d_matched)
summary(d_matched)
table(d_matched$time)
with(d_matched, tapply(m_aggregated_proportion, list(time), mean))
names(d_match)
d_matched
209757/906
906/27
d_matched %.% group_by(ASD, Subject) %.% summarise(Count = n_distinct(TrialNo))
#count of trials per condition for each subject
d_matched %.% group_by(ASD, Subject, Condition) %.% summarise(Count = n_distinct(TrialNo))
# number of participants included by group and condition
d_matched %.% group_by(ASD, Condition) %.% summarise(Count = n_distinct(Subject))
906/25
906/3
25*3
names(d_matched)
dim(d_matched)
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(Looking,na.rm=TRUE))
names(d_matched)
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(Look,na.rm=TRUE))
warnings()
head(as.numeric(d_matched$Look))
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(as.numeric(Look),na.rm=TRUE))
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(as.numeric(Look),na.rm=TRUE))
warning()
warning()
str(temp)
head(temp)
temp <- d_matched %.% group_by(Subject,Condition,as.factor(Time)) %.% summarize(Proportion=mean(as.numeric(Look),na.rm=TRUE))
warnings()
head(d_matched$GazeByImageAOI)
names(d)
head(d_matched[,c("Look","GazeByImageAOI")])
head(d[,c("Look","GazeByImageAOI")])
str(d_matched$Look)
str(d_matched$GazeByImageAOI)
as.numeric(d_matched$GazeByImageAOI)
levels(d_matched$GazeByImageAOI)
d_matched$GazeByImageAOI <- as.numeric(d_matched$GazeByImageAOI)-1
head(d_matched$GazeByImageAOI)
temp <- d_matched %.% group_by(Subject,Condition,as.factor(Time)) %.% summarize(Proportion=mean(as.numeric(GazeByImageAOI),na.rm=TRUE))
str(temp)
head(temp)
tail(temp)
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
head(temp)
head(temp[temp$Time==-2000,])
head(with(d_matched,tapply(GazeByImageAOI,list(Sub=Subject,Cond=Condition,Time=Time),mean,na.rm=TRUE)))
temp2<- with(d_matched,tapply(GazeByImageAOI,list(Sub=Subject,Cond=Condition,Time=Time),mean,na.rm=TRUE))
length(temp2)
temp2<- with(d_matched,aggregate(d_matched[,c("Subject","Condition","Time")],list(Sub=Subject,Cond=Condition,Time=Time),mean,na.rm=TRUE))
head(temp2)
temp2<- aggregate(d_matched[,c("Subject","Condition","Time")],list(Sub=d_matched$Subject,Cond=d_matched$Condition,Time=d_matched$Time),mean,na.rm=TRUE)
head(temp2)
temp2<- aggregate(d_matched$GazeByImageAOI,list(Sub=d_matched$Subject,Cond=d_matched$Condition,Time=d_matched$Time),mean,na.rm=TRUE)
head(temp2)
ix <- order(temp2$Sub,temp2$Cond,temp2$Time)
head(temp2[ix,])
subset(d_matched,d_matched$Subject==302 & d_matched$Condition=="BothDiff" & d_matched$Time==0)
subset(d_matched[,c("Subject","Condition","Time","GazeByImageAOI")],d_matched$Subject==302 & d_matched$Condition=="BothDiff" & d_matched$Time==0)
subset(d_matched[,c("Subject","Condition","Time","GazeByImageAOI")],d_matched$Subject==302 & d_matched$Condition=="BothDiff" & d_matched$Time==33)
subset(d_matched[,c("Subject","Condition","Time","GazeByImageAOI")],d_matched$Subject==302 & d_matched$Condition=="BothDiff" & d_matched$Time==0)
subset(d_matched[,c("Subject","Condition","Time","GazeByImageAOI")],d_matched$Subject==302 & d_matched$Condition=="BothDiff")
temp <- subset(d_matched[,c("Subject","Condition","Time","GazeByImageAOI")],d_matched$Subject==302 & d_matched$Condition=="BothDiff")
dim(temp)
temp_w <- dcast(temp,Subject+Condition~Time,value.var=GazeByImageAOI)
names(temp)
temp_w <- dcast(temp,Subject+Condition~Time,value.var="GazeByImageAOI")
temp_w[,1:10]
temp_w <- dcast(temp,Subject+Condition~Time,value.var="GazeByImageAOI",fun.aggregate=mean,na.rm=T)
temp_w[,1:10]
temp <- d_matched %.% group_by(Subject,Condition,Time) %.% summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
name(temp)
names(temp)
head(temp,n=20)
names(m_aggregated_proportion)
head(m_aggregated_proportion,n=30)
m_proportion_over_trials <- d_matched %.%
group_by(Subject,Condition,Time) %.%
summarize(Proportion=mean(GazeByImageAOI,na.rm=TRUE))
d_matched <- merge(d_matched,m_proportion_over_trials,by=Subject)
d_matched <- merge(d_matched,m_proportion_over_trials,by="Subject")
